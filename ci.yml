# .github/workflows/ci.yml
name: LaunchPad Notebook CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  flutter_test:
    name: Flutter Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
      - run: flutter pub get
      - run: flutter analyze
      - run: flutter test

  build_android:
    name: Build Android APK
    needs: flutter_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
      - run: flutter pub get
      - run: flutter build apk --debug
      - uses: actions/upload-artifact@v3
        with:
          name: debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk

  build_ios:
    name: Build iOS
    needs: flutter_test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
      - run: flutter pub get
      - run: flutter build ios --debug --no-codesign
      
  deploy_backend:
    name: Deploy Backend
    needs: flutter_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Install dependencies for backend
      - name: Install backend dependencies
        run: |
          cd server
          npm ci
      
      # Run backend tests
      - name: Test backend
        run: |
          cd server
          npm test
          
      # Deploy to Heroku (example)
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "launchpad-notebook-backend"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "server"
          
  deploy_supabase:
    name: Deploy Supabase Migrations
    needs: flutter_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      # Deploy migrations to Supabase
      - name: Deploy Supabase migrations
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
  build_release:
    name: Build Release
    needs: [flutter_test, deploy_backend, deploy_supabase]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
          
      # Setup secrets and configuration
      - name: Create env file
        run: |
          echo "const String supabaseUrl = '${{ secrets.SUPABASE_URL }}';" > lib/utils/env.dart
          echo "const String supabaseAnonKey = '${{ secrets.SUPABASE_ANON_KEY }}';" >> lib/utils/env.dart
          echo "const String backendUrl = '${{ secrets.BACKEND_URL }}';" >> lib/utils/env.dart
          
      # Decode Android keystore
      - name: Decode Android keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          
      # Create key.properties
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=upload" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties
          
      # Build Android App Bundle
      - name: Build Android App Bundle
        run: flutter build appbundle
        
      # Upload artifacts
      - name: Upload Android Release
        uses: actions/upload-artifact@v3
        with:
          name: android-release
          path: build/app/outputs/bundle/release/app-release.aab
